export const securityFeaturesContent = {
  accountType: {
    name: "Account Type",
    description: "In the Ethereum network, there are different types of accounts, and proper understanding of them is crucial for the security of storing and managing digital assets. Incorrect choice or use of an account can lead to loss of funds or their compromise, as attackers actively exploit weaknesses in access control mechanisms.",
    eoa: {
      name: "Externally Owned Account (EOA)",
      description: "EOA is the basic account type in Ethereum, controlled by a private key that was discussed earlier. It has a key pair (private and public) but does not contain code on the blockchain. Transactions are sent directly from EOA and signed with a private key, allowing the initiation of asset transfers or smart contract calls. However, EOA does not support programmable logic, and security depends entirely on preserving the private key. Its compromise means loss of access to assets without recovery possibility, as there are no transaction cancellation mechanisms. The only protection is the user's adherence to security rules: secure storage of seed phrases, hardware wallets, MFA, etc.",
      features: "* Access control via private key\n* \"Security in simplicity\" (does not support programmable logic)",
      advantages: "* Simple and straightforward to use\n* Lower transaction fees due to simpler execution\n* Native to the blockchain - supported by all wallets and dApps\n* Full control over the account if key is secured",
      disadvantages: "* No recovery mechanism - loss of private key means permanent loss of assets\n* No additional security features beyond key possession\n* Limited functionality - cannot automate transactions or set policies\n* Single point of failure - compromise of key means complete account takeover"
    },
    smartContract: {
      name: "Contract Account",
      description: "This is an account in the form of a smart contract with program logic, controlled not by a single key, but by its code, which can, for example, require multi-signature for transactions. Smart wallets do not initiate transactions on their own — they need a call from an EOA, but despite this, their main advantage is the possibility of complex security logic. Because of this, smart wallets offer a higher level of security and convenience. However, errors in the code can lead to loss of assets, so careful auditing is required.",
      features: "* Control over execution through specific implementation\n* Programmable access control\n* Social recovery - key replacement through guardians in case of access loss\n* Limits and policies — limits, address filters, transaction blocking\n* Possibility of sponsorship or payment of transactions with third-party tokens",
      advantages: "* Enhanced security through programmable business logic\n* Multiple verification methods including multi-signature support\n* Ability to recover access through guardian mechanisms\n* Can implement transaction limits and security policies\n* More flexible and customizable than EOA",
      disadvantages: "* Higher complexity increases potential for security vulnerabilities\n* Requires an EOA to initiate transactions\n* Higher gas costs due to more complex execution\n* Potential for code errors that could lock funds permanently\n* Less universal support in wallets and dApps"
    },
    erc4337: {
      name: "Abstract Account (ERC-4337)",
      description: "This is a new model where smart wallets can initiate transactions without an EOA. ERC 4337 introduces the concept of a user operation (UserOperation) — special objects that contain multiple blockchain interactions that users can send to a general distributed list of such objects. Special bundler nodes are constantly listening to and processing this list, forming transactions with user operations and sending them to a single common EntryPoint contract, which in turn calls the smart contract account that directly executes user operations interacting with other blockchain contracts. This architecture allows the Smart Contract Account to independently verify and execute actions. Fees can be paid either from the account balance or through special optional Paymaster functionality using other tokens. ERC 4337 reduces the risks of human error, but requires quality code, as new threats, such as DoS attacks on the mempool, are still possible.",
      features: "* Control over execution through standardized and verified implementation\n* Programmable access control\n* Social recovery - key replacement through guardians in case of access loss\n* Limits and policies — limits, address filters, transaction blocking\n* Possibility of sponsorship or payment of transactions with third-party tokens",
      advantages: "* Improved user experience with gasless transactions\n* No need for EOA to initiate transactions\n* Support for transaction batching and sponsorship\n* Standardized implementation reduces security risks\n* Account abstraction allows for flexible authentication methods",
      disadvantages: "* Relatively new standard with less battle-testing\n* Requires specialized infrastructure (bundlers)\n* Potential for new attack vectors in the mempool\n* More complex architecture to understand and debug\n* Limited adoption compared to traditional accounts"
    }
  }
};