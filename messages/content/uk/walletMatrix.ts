export const walletMatrixContent = {
  criteria: {
    keyHolder: {
      title: "Носій ключа",
      description: "Фізичний носій або середовище, де зберігається приватний криптографічний ключ",
      types: {
        hardware: {
          title: "Апаратний гаманець",
          description: "Апаратний носій — це **фізичний пристрій**, спеціально призначений для зберігання приватних ключів у захищеному апаратному середовищі, наприклад у Secure Element. Такий носій ізолює ключ і не дозволяє експортувати його назовні, що робить викрадення неможливим навіть за наявності шкідливого ПЗ на основному комп'ютері.\n\nУсі криптографічні операції — підпис транзакцій, генерація ключів — виконуються всередині пристрою без розкриття ключа зовнішнім додаткам. Це забезпечує **максимальний рівень безпеки** для зберігання криптовалютних активів, особливо для довгострокових інвестицій або великих сум.",
          implementations: [
            {
              title: "Ledger Nano S/X/S Plus",
              url: "https://www.ledger.com/"
            },
            {
              title: "Trezor One/Model T",
              url: "https://trezor.io/"
            },
            {
              title: "KeepKey",
              url: "https://keepkey.com/"
            }
          ],
          useful_links: [
            {
              title: "Безпека апаратних гаманців",
              url: "https://www.ledger.com/academy/security/hack-of-hardware-wallets"
            },
            {
              title: "Як працюють апаратні гаманці",
              url: "https://wiki.trezor.io/Hardware_wallet"
            }
          ]
        },
        software: {
          title: "Програмний гаманець",
          description: "Програмний носій — це **програмне середовище або додаток** (мобільний чи десктопний гаманець), що зберігає приватний ключ у пам'яті пристрою загального призначення. Це забезпечує користувачу **легкий доступ до ключа** та максимальну зручність використання для щоденних транзакцій.\n\nОднак такий підхід означає, що ключ знаходиться на пристрої, підключеному до інтернету, і тому потенційно **вразливий до віддалених атак**. Програмний носій не має апаратної ізоляції, тому рівень його безпеки значною мірою залежить від захищеності операційної системи пристрою та обережності користувача.",
          implementations: [
            {
              title: "MetaMask",
              url: "https://metamask.io/"
            },
            {
              title: "Trust Wallet",
              url: "https://trustwallet.com/"
            },
            {
              title: "Phantom",
              url: "https://phantom.app/"
            }
          ],
          useful_links: [
            {
              title: "Що таке програмний гаманець?",
              url: "https://www.ledger.com/academy/what-is-a-software-wallet"
            }
          ]
        },
        paper: {
          title: "Паперовий гаманець",
          description: "Паперовий носій — це **фізичний папір або носій**, на якому надруковано чи записано приватний ключ або seed-фразу. Він повністю ізольований від мережі і фактично виступає в ролі **матеріального резервного носія** ключа, забезпечуючи захист від онлайн-атак та технічних збоїв.\n\nОсновні ризики пов'язані з **фізичною безпекою** — втрата, пошкодження, вигорання, або несанкціонований доступ до паперового носія. Також критичною є відсутність резервної копії: якщо папір втрачено або пошкоджено, доступ до активів може бути втрачено назавжди.",
          implementations: [
            {
              title: "BitAddress",
              url: "https://www.bitaddress.org/"
            },
            {
              title: "MyEtherWallet Paper Wallet",
              url: "https://www.myetherwallet.com/"
            }
          ],
          useful_links: []
        },
        brain: {
          title: "Мнемонічний гаманець",
          description: "Пам'ять (мнемонічний носій) — це **приватний ключ, що зберігається в пам'яті людини** у вигляді мнемонічної чи парольної фрази. Такий підхід повністю усуває будь-який фізичний носій, забезпечуючи абсолютну мобільність та недоступність для фізичних атак.\n\nПроте практично цей метод несе **високі ризики**: забування фрази або використання надто простої фрази, яку можуть підібрати зловмисники. Через ці причини цей спосіб нині майже не застосовується у відповідальних сценаріях, поступаючись іншим, більш надійним носіям ключів.",
          implementations: [],
          useful_links: []
        }
      }
    },
    networkConnectivity: {
      title: "Мережевий стан",
      description: "Ступінь підключення носія ключа до мережі, що визначає баланс між доступністю коштів і експозицією до онлайн-загроз",
      types: {
        hot: {
          title: "Гарячий гаманець",
          description: "Гарячий стан — це режим, в якому приватний ключ зберігається та використовується у середовищі з **постійним мережевим підключенням (онлайн)**. Прикладом є гаманець на комп'ютері чи смартфоні з доступом до інтернету, біржові гаманці або web-гаманці.\n\nГарячий стан забезпечує **миттєвий доступ до коштів** і максимальну зручність транзакцій, проте водночас значно підвищує ризик несанкціонованого доступу через онлайн-загрози. У разі компрометації такого підключеного пристрою або додатка приватний ключ може бути викрадено зловмисниками.",
          implementations: [
            {
              title: "Біржові гаманці (Binance, Coinbase)",
              url: "https://www.binance.com/"
            }
          ],
          useful_links: []
        },
        cold: {
          title: "Холодний гаманець",
          description: "Холодний стан — це режим, в якому ключ зберігається **офлайн, без прямого з'єднання з інтернетом**. Транзакції в цьому режимі підписуються в ізольованому середовищі (на відокремленому пристрої або комп'ютері, що не має доступу до мережі), а потім передаються в онлайн-мережу для їхнього підтвердження.\n\nЗавдяки тому, що приватний ключ не контактує з інтернет-серверами під час підписання, навіть у випадку перехоплення транзакції онлайн-зловмисник не зможе дістатися до самого ключа. Холодний стан значно підвищує безпеку зберігання, однак доступ до активів стає менш оперативним і потребує додаткових дій.",
          implementations: [
            {
              title: "Апаратні гаманці",
              url: "https://www.ledger.com/"
            }
          ],
          useful_links: [
            {
              title: "Що таке холодне зберігання?",
              url: "https://www.investopedia.com/terms/c/cold-storage.asp"
            },
            {
              title: "Гаманці холодного зберігання",
              url: "https://blog.chainport.io/cold-storage-wallets"
            }
          ]
        },
        deepCold: {
          title: "Глибоко-холодне зберігання",
          description: "Глибоко-холодний стан — це режим, в якому ключ зберігається **офлайн з додатковими бар'єрами для доступу**. Це передбачає максимально ізольоване довгострокове зберігання, при якому отримання доступу до ключа навмисно утруднене і потребує значного часу.\n\nНаприклад, приватний ключ може бути розміщено в банківському сейфі або іншому захищеному сховищі, і щоб його дістати, потрібно пройти через кілька етапів авторизації чи фізичних дій. Такий 'глибоко холодний' підхід мінімізує ймовірність компрометації, проте є непрактичним для частого використання, оскільки доступ до коштів може займати години чи дні.",
          implementations: [],
          useful_links: []
        }
      }
    },
    custodyModel: {
      title: "Модель опіки",
      description: "Спосіб розподілу відповідальності за зберігання приватного ключа і, відповідно, контроль над акаунтом",
      types: {
        custodial: {
          title: "Кастодіальна модель",
          description: "Кастодіальна модель передбачає **управління ключами користувача стороннім сервісом** (криптовалютною біржею, кастодіаном), що створює і зберігає приватні ключі замість користувача. Основна перевага такого підходу — **зручність використання** та знижений поріг входу для новачків, оскільки немає необхідності самостійного зберігання ключів та налаштування гаманців.\n\nСеред суттєвих недоліків — **повна залежність від безпеки та надійності третьої сторони**, ризик втрати активів у разі банкрутства або зламу провайдера. Прикладом є інцидент із біржею FTX, банкрутство якої призвело до втрати коштів клієнтами на суму понад мільярд доларів. Також кастодіальна модель знижує приватність користувачів через повний доступ провайдера до інформації про транзакції.",
          implementations: [
            {
              title: "Coinbase",
              url: "https://www.coinbase.com/"
            },
            {
              title: "Binance",
              url: "https://www.binance.com/"
            }
          ],
          useful_links: []
        },
        selfCustody: {
          title: "Самостійна (некастодіальна) модель",
          description: "Самостійна модель надає **користувачеві повний контроль над приватними ключами** без залучення сторонніх сторін. Цей підхід **вирішує проблему довіри та конфіденційності**, забезпечуючи автономність і криптографічну безпеку. Користувач отримує абсолютний контроль над своїми активами та не залежить від сторонніх сервісів.\n\nВодночас **відповідальність за безпечне генерування, зберігання та резервне копіювання ключів** повністю покладається на користувача, що вимагає високого рівня технічних навичок та дисципліни. Недоліками моделі є високий ризик людських помилок (втрата seed-фрази або соціальна інженерія), а також відсутність механізмів простого відновлення доступу.",
          implementations: [
            {
              title: "MetaMask",
              url: "https://metamask.io/"
            },
            {
              title: "Ledger",
              url: "https://www.ledger.com/"
            }
          ],
          useful_links: []
        },
        sharedCustody: {
          title: "Спільна опіка",
          description: "Спільна модель (MPC/TSS) є **компромісним рішенням**, що розподіляє контроль над ключами між користувачем та сервіс-провайдером за допомогою криптографічних порогових схем. Перевагою цього підходу є **усунення єдиної точки відмови**, що підвищує безпеку активів — транзакція можлива лише за взаємодії обох сторін.\n\nКрім того, ця модель спрощує механізми відновлення доступу за допомогою альтернативних методів автентифікації (біометрія, соціальні логіни тощо), набираючи популярності через баланс між безпекою та зручністю. Окремим підкласом є **соціальні провайдери**, які інтегрують керування shard-фрагментами ключа з популярними сервісами автентифікації (Google, Apple, Discord), поєднуючи стійкість із знайомим Web2 UX.",
          implementations: [
            {
              title: "BitGo",
              url: "https://www.bitgo.com/"
            },
            {
              title: "Casa",
              url: "https://keys.casa/"
            }
          ],
          useful_links: []
        }
      }
    },
    accountType: {
      title: "Тип акаунта",
      description: "Різновид облікового запису в блокчейні, що визначає, як виконуються транзакції та хто (або що) ними керує",
      types: {
        eoa: {
          title: "EOA",
          description: "Зовнішньо керований акаунт (EOA) є **базовим типом акаунту в Ethereum**, контрольованим приватним ключем. Він має пару ключів (приватний і публічний), але не містить коду на блокчейні. Транзакції відправляються напряму від EOA і підписуються приватним ключем, що дозволяє ініціювати передачу активів або виклик смарт-контракту.\n\nПроте EOA не підтримує програмованої логіки, а **безпека повністю залежить від збереження приватного ключа**. Компрометація ключа означає втрату доступу до активів без можливості відновлення, оскільки механізмів скасування транзакцій не існує.",
          implementations: [
            {
              title: "MetaMask",
              url: "https://metamask.io/"
            },
            {
              title: "Trust Wallet",
              url: "https://trustwallet.com/"
            }
          ],
          useful_links: []
        },
        smartContract: {
          title: "Контрактний акаунт / смарт-гаманець",
          description: "Контрактний акаунт — це **акаунт у вигляді смарт-контракту з програмною логікою**, контроль над яким здійснюється не одним ключем, а його кодом. Смарт-гаманці не ініціюють транзакції самостійно — потрібен виклик з EOA, але головна їх перевага — **можливість складної логіки безпеки**: мультипідпис, соціальне відновлення, обмеження і політики, ротація ключів та автоматизація.\n\nЗавдяки цьому смарт-гаманці пропонують вищий рівень безпеки та зручності — Safe захищає понад $100 млрд активів на 7,5 млн адресах. Однак помилки в коді можуть призвести до втрати активів, тому потрібен ретельний аудит коду.",
          implementations: [
            {
              title: "Gnosis Safe",
              url: "https://safe.global/"
            },
            {
              title: "Argent",
              url: "https://www.argent.xyz/"
            }
          ],
          useful_links: [
            {
              title: "Майбутнє Ethereum - смарт-акаунти",
              url: "https://safe.mirror.xyz/vZHodiI1NLJbz4fd0vuil0hyLHNGCBH8oLyMzGTb4sc"
            }
          ]
        },
        erc4337: {
          title: "Акаунт з абстракцією (ERC-4337)",
          description: "Акаунти з абстракцією (ERC 4337) — це **нова модель, де смарт-гаманці можуть ініціювати транзакції без EOA**. ERC 4337 вводить концепцію користувальницької операції (UserOperation) — спеціальних об'єктів, які всередині містять декілька взаємодій з блокчейном. Користувачі надсилають їх у загальний розподілений список, який обробляють спеціальні **bundlers**.\n\nТака архітектура дозволяє смарт-контракт акаунту (Smart Contract Account) самостійно перевіряти і виконувати дії. **Комісії можна сплачувати** як з балансу акаунту, так і через спеціальний опціональний функціонал Paymaster за допомогою інших токенів, що вирішує проблему необхідності тримати ETH для оплати газу.",
          implementations: [
            {
              title: "Biconomy",
              url: "https://www.biconomy.io/"
            },
            {
              title: "Stackup",
              url: "https://www.stackup.sh/"
            }
          ],
          useful_links: [
            {
              title: "EIP-4337: Account Abstraction",
              url: "https://eips.ethereum.org/EIPS/eip-4337"
            }
          ]
        }
      }
    },
    authorizationScheme: {
      title: "Схема авторизації",
      description: "Метод підтвердження прав доступу до акаунта, тобто яка комбінація ключів або чинників використовується для підписання транзакцій",
      types: {
        singleSig: {
          title: "Однопідписна схема",
          description: "Single-sig (одноосібний підпис) — це схема, в якій **кожен акаунт контролюється одним приватним ключем**, який використовується для підписання транзакцій. Наприклад, стандартні гаманці Ethereum (MetaMask) працюють саме за такою логікою, де ключ генерується на основі 12-словної seed-фрази.\n\nБезпека такої схеми базується на **повній відповідальності користувача**: компрометація ключа миттєво відкриває доступ до активів, а втрата ключа означає безповоротну втрату коштів. Зручність полягає у простоті використання: транзакції підписуються швидко, без залучення сторонніх осіб і без додаткових витрат на перевірку кількох підписів.",
          implementations: [
            {
              title: "Стандартні EOA акаунти",
              url: "https://ethereum.org/en/developers/docs/accounts/"
            }
          ],
          useful_links: []
        },
        multiSig: {
          title: "Мультипідпис",
          description: "Multisig (мультипідписова схема) **функціонує через смарт-контракт**, який вимагає кілька підписів для виконання транзакції, зазвичай у форматі M-of-N. Наприклад, для транзакції з трьома власниками ключів необхідні підписи від щонайменше двох із них. Безпека мультисігу забезпечується тим, що **жоден окремий ключ не має можливості здійснити транзакцію самостійно**.\n\nДля доступу до коштів потрібна координація кількох учасників, що виключає ризик через втрату або викрадення одного ключа. Зручність зменшується через потребу координації між підписантами для кожної транзакції, що може призводити до затримок у виконанні операцій.",
          implementations: [
            {
              title: "Gnosis Safe",
              url: "https://safe.global/"
            },
            {
              title: "BitGo",
              url: "https://www.bitgo.com/"
            }
          ],
          useful_links: [
            {
              title: "Що таке мультипідпис гаманець?",
              url: "https://www.ledger.com/academy/what-is-a-multisig-wallet"
            },
            {
              title: "Gnosis Safe - концепція",
              url: "https://docs.chainargos.com/documentation/concept-glossary/address-types/multi-sig/gnosis-safe"
            }
          ]
        },
        mpcTss: {
          title: "Порогова підписна схема (MPC/TSS)",
          description: "MPC/TSS (багатосторонні обчислення / порогові підписи) **побудовані на ідеї розподіленого генерування та підписування транзакцій**, при якому приватний ключ не існує в цілісному вигляді, а лише у вигляді часток, що належать різним учасникам. Під час транзакції принаймні t із n учасників обчислюють підпис спільно, не розкриваючи своїх часток один одному.\n\nБезпека такої схеми полягає у тому, що для атаки необхідно скомпрометувати кілька учасників, а зовнішній спостерігач не може ідентифікувати особливості авторизації, оскільки підпис виглядає як звичайний. Зручність MPC-гаманців полягає в тому, що користувач взаємодіє з системою як із традиційним гаманцем: йому не потрібно зберігати seed-фразу, і відновлення доступу можна здійснити через взаємодію з кількома сторонами.",
          implementations: [
            {
              title: "Fireblocks",
              url: "https://www.fireblocks.com/"
            },
            {
              title: "ZenGo",
              url: "https://zengo.com/"
            }
          ],
          useful_links: [
            {
              title: "MPC vs Multi-sig",
              url: "https://screenprotocol.medium.com/mpc-vs-multi-sig-misconceptions-and-valid-arguments-95fc92ecf842"
            },
            {
              title: "Fireblocks MPC-CMP Whitepaper",
              url: "https://www.fireblocks.com/whitepaper/mpc-cmp-wallet-as-a-service/"
            }
          ]
        },
        socialRecovery: {
          title: "Соціальне відновлення",
          description: "Social recovery (соціальне відновлення) **працює таким чином, що користувач може відновити доступ до свого акаунту через довірених осіб (guardians)**, які підтверджують заміну втраченої авторизації на нову. Основний контроль за акаунтом залишається у користувача, і у звичайних умовах він самостійно підписує транзакції.\n\nБезпека полягає у тому, що **опікуни не мають постійного доступу до активів**, а лише можуть спільно, у випадку втрати основного ключа, схвалити зміну на новий. Зручність цього підходу в тому, що у повсякденному використанні гаманець функціонує як single-sig, але з можливістю простого відновлення доступу за допомогою guardian-осіб, що наближає досвід користування до традиційних 'reset password' механізмів.",
          implementations: [
            {
              title: "Argent",
              url: "https://www.argent.xyz/"
            },
            {
              title: "Candide Labs",
              url: "https://candidelabs.com/"
            }
          ],
          useful_links: [
            {
              title: "Чому потрібні гаманці соціального відновлення",
              url: "https://vitalik.eth.limo/general/2021/01/11/recovery.html"
            },
            {
              title: "Що таке соціальне відновлення?",
              url: "https://www.argent.xyz/learn/what-is-social-recovery"
            },
            {
              title: "Gnosis Safe - модуль соціального відновлення",
              url: "https://safe.global/blog/introducing-candides-social-recovery"
            }
          ]
        }
      }
    }
  }
};