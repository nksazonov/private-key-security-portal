export const securityFeaturesContent = {
  authorizationScheme: {
    name: "Схеми авторизації",
    description: "Вибір схеми авторизації безпосередньо впливає на безпеку та надійність блокчейн-акаунту. Традиційний підхід із одним ключем (single-sig) покладає всю відповідальність на власника приватного ключа. У разі його компрометації зловмисники миттєво отримують доступ до коштів, а при втраті ключа власник безповоротно втрачає доступ. Відсутність зручних механізмів відновлення змушує багатьох обирати централізовані рішення (біржі, кастодіальні гаманці), що створює системні ризики. Тому останніми роками з'явилися нові схеми управління акаунтами – такі як мультипідпис, порогові підписи на основі багатосторонніх обчислень та соціальне відновлення, які покликані підвищити безпеку без сильного погіршення зручності користування.",
    singleSig: {
      name: "Одноосібній підпис",
      description: "Кожен акаунт контролюється одним приватним ключем, який використовується для підписання транзакцій. Наприклад, стандартні гаманці Ethereum працюють саме за такою логікою, де ключ генерується на основі 12-словної seed-фрази. Безпека такої схеми базується на повній відповідальності користувача, тобто компрометація ключа миттєво відкриває доступ до активів, а втрата ключа означає безповоротну втрату коштів. Це створює єдину точку відмови, що є основною вразливістю.",
      features: "* Єдина точка доступу",
      useful_links: [
        {
          title: "Розуміння вразливостей приватних ключів",
          url: "https://ethereum.org/en/security/"
        },
        {
          title: "Найкращі практики для безпеки ключів",
          url: "https://metamask.io/security/"
        }
      ]
    },
    multiSig: {
      name: "Мультипідпис",
      description: "Мультипідписова схема функціонує через смарт-контракт, який вимагає кілька підписів для виконання транзакції, зазвичай у форматі M-of-N: наприклад, для транзакції з трьома власниками ключів необхідні підписи від щонайменше двох із них. Безпека мультисигу забезпечується тим, що жоден окремий ключ не має можливості здійснити транзакцію самостійно – для доступу до коштів потрібна координація кількох учасників, що виключає ризик через втрату або викрадення одного ключа.",
      features: "* Розподіл відповідальності\n* Можливість делегування підпису третім особам",
      useful_links: [
        {
          title: "Ledger Academy. Що таке Multisig-гаманець?",
          url: "https://www.ledger.com/academy/what-is-a-multisig-wallet"
        },
        {
          title: "Krayon Digital. Мультисиг-гаманці: Повний посібник 2024",
          url: "https://www.krayondigital.com/blog/multisig-wallets-complete-guide-2024"
        }
      ]
    },
    multiWeightedSig: {
      title: "Множинний зважений підпис",
      description: "Спробуйте цей інтерактивний приклад налаштування зваженого мультипідпису. Різні підписанти можуть мати різну вагу, і транзакція виконується лише тоді, коли сумарна вага підписантів досягає або перевищує встановлений поріг.",
      addAccount: "Додати акаунт",
      enoughWeight: "Достатня вага для підпису",
      notEnoughWeight: "Недостатня вага для підпису",
      weightNote: "Налаштуйте поріг, пересуваючи червону лінію. Додавайте підписи, відмічаючи чекбокси біля акаунтів.",
      threshold: "Поріг"
    },
    mpcTss: {
      name: "Багатосторонні обчислення та порогові підписи",
      description: "MPC/TSS (Multi-Party Computation / Threshold Signatures, багатосторонні обчислення / порогові підписи) побудовані на ідеї розподіленого генерування та підписування транзакцій, при якому приватний ключ не існує в цілісному вигляді, а лише у вигляді часток, що належать різним учасникам. Під час транзакції принаймні t із n учасників обчислюють підпис спільно, не розкриваючи своїх часток один одному, що забезпечує стандартний ECDSA-підпис, видимий у блокчейні як від одного ключа. Безпека такої схеми полягає у тому, що для атаки необхідно скомпрометувати кілька учасників, а зовнішній спостерігач не може ідентифікувати особливості авторизації, оскільки підпис виглядає як звичайний.",
      features: "* Розподілене генерування та підписування транзакцій\n* Відсутність єдиної точки відмови\n* Невидимість для зовнішніх спостерігачів",
      useful_links: [
        {
          title: "Screen Protocol. MPC проти мультисиг — Хибні уявлення та вагомі аргументи",
          url: "https://screenprotocol.medium.com/mpc-vs-multi-sig-misconceptions-and-valid-arguments-95fc92ecf842"
        }
      ]
    },
    socialRecovery: {
      name: "Соціальне відновлення",
      description: "Social recovery (соціальне відновлення) працює таким чином, що користувач може відновити доступ до свого акаунту через довірених осіб (guardians), які підтверджують заміну втраченої авторизації на нову. Основний контроль за акаунтом залишається у користувача, і у звичайних умовах він самостійно підписує транзакції. Безпека полягає у тому, що опікуни не мають постійного доступу до активів, а лише можуть спільно, у випадку втрати основного ключа, схвалити зміну на новий. Це усуває єдину точку відмови й дозволяє гнучко реагувати на інциденти втрати доступу.",
      features: "* Відновлення доступу через довірених осіб\n* Зниження ризику втрати активів",
      useful_links: [
        {
          title: "Vault12. Розвиток концепції соціального відновлення від Віталіка Бутеріна",
          url: "https://vault12.com/blog/expanding-on-vitalik-buterin-vision-for-social-recovery-security/"
        },
        {
          title: "Safe Global. Представляємо модуль соціального відновлення",
          url: "https://safe.global/blog/introducing-candides-social-recovery"
        },
        {
          title: "Argent. Що таке соціальне відновлення?",
          url: "https://www.argent.xyz/learn/what-is-social-recovery"
        }
      ]
    },
    socialRecoveryDemo: {
      title: "Інтерактивна демонстрація соціального відновлення",
      description: "Спробуйте цей інтерактивний приклад гаманця із соціальним відновленням. Власник має основний контроль над акаунтом, але опікуни можуть колективно схвалити зміни, такі як заміна власника, у випадку втрати доступу.",
      owner: "Власник",
      guardians: "Опікуни",
      changeOwner: "Змінити власника",
      addGuardian: "Додати опікуна",
      removeGuardian: "Видалити опікуна",
      signTransaction: "Підписати транзакцію",
      ownerMustSign: "Власник має підписати",
      onlyOwnerSign: "Тільки власник може підписувати звичайні транзакції",
      signTransactionHelp: "Для звичайних транзакцій потрібен тільки підпис власника",
      guardiansMustAgree: "Опікуни мають погодитись",
      allGuardiansAgree: "Всі опікуни погоджуються",
      ownerMustAgree: "Власник має погодитись",
      ownerAgreesChange: "Власник погоджується на зміну",
      everyoneMustAgree: "Усі мають погодитись",
      addNewGuardian: "Додати нового опікуна",
      cancelRequest: "Скасувати",
      newOwner: "Новий власник:",
      newGuardian: "Новий опікун:",
      addGuardianHelp: "Щоб додати нового опікуна, власник і всі опікуни повинні погодитись",
      removeGuardianHelp: "Щоб видалити опікуна, власник і всі інші опікуни повинні погодитись",
      changeOwnerHelp: "Виберіть усіх опікунів для підтвердження нового власника. Власник може скасувати запит на зміну власника.",
      changeOwnerNoGuardiansHelp: "За відсутності опікунів, власник має сам схвалити зміну",
      lostMessage: "Саме так користувачі зазвичай втрачають контроль над своїм акаунтом",
      reloadMessage: "Оновіть сторінку, щоб перезапустити інтерактивний приклад",
      reload: "Перезавантажити демо"
    }
  },
  accountType: {
    name: "Тип акаунту",
    description: "У мережі Ethereum існують різні типи акаунтів, від правильного розуміння яких залежить безпека зберігання та управління цифровими активами. Невірний вибір чи використання акаунту може призвести до втрати коштів або їх компрометації, оскільки зловмисники активно експлуатують слабкі місця у механізмах контролю доступу.",
    eoa: {
      name: "Зовнішньо-керований акаунт (EOA)",
      description: "EOA є базовим типом акаунту в Ethereum, контрольованим парою ключів (приватний і публічний), але не містить коду на блокчейні. Транзакції відправляються напряму від EOA і підписуються приватним ключем, що дозволяє ініціювати передачу активів або виклик смарт-контракту.",
      features: "* Контроль доступу за допомогою приватного ключа\n* \"Безпека у простоті\" (не підтримує програмовану логіку)",
      advantages: "* Простий та зрозумілий у використанні\n* Нижча вартість транзакцій через простішу логіку виконання\n* Нативний для блокчейну - підтримується всіма гаманцями та dApps",
      disadvantages: "* Відсутність додаткових функцій безпеки крім володіння ключем\n* Обмежена функціональність - неможливість автоматизувати транзакції або встановлювати політики\n* Єдина точка відмови - компрометація ключа означає повне захоплення акаунту",
      code: "// Без смарт-контракту, тільки приватний ключ\n// Адреса: 0xbAA3384a0681E701F769DfaE81f1fAc06e1f9234\n0xa24df31f43ca025df6f9c07f68155b4594a37381ed196a94cee14fb921c3a738",
      useful_links: [
        {
          title: "Розуміння акаунтів в Ethereum",
          url: "https://ethereum.org/en/developers/docs/accounts/"
        },
        {
          title: "Керування ключами для зовнішньо-керованих акаунтів",
          url: "https://docs.metamask.io/wallet/reference/best-practices/"
        }
      ]
    },
    smartContract: {
      name: "Контрактний акаунт",
      description: "Це акаунт у вигляді смарт-контракту з програмною логікою, контроль над яким здійснюється не одним ключем, а його кодом, який може, наприклад, вимагати мультипідпису для транзакцій. Смарт-гаманці не ініціюють транзакції самостійно — потрібен виклик з EOA.",
      features: "* Контроль над виконанням через специфічну реалізацію\n* Програмований контроль доступу\n* Соціальне відновлення - заміна ключа через опікунів у разі втрати доступу\n* Обмеження і політики — ліміти, фільтри адрес, блокування транзакцій\n* Можливість спонсорства чи оплати транзакцій сторонніми токенами",
      advantages: "* Посилена безпека завдяки програмованій бізнес-логіці\n* Більш гнучкий та налаштовуваний ніж EOA",
      disadvantages: "* Вища складність збільшує потенціал для вразливостей безпеки\n* Вищі витрати на газ через складнішу логіку виконання\n* Потенційна можливість помилок у коді, що можуть назавжди заблокувати кошти\n* Повна відсутність стандартизації",
      code: "// Нестандартизований, пропрієтарний код Solidity\ncontract NonStandardizedWallet {\n  // ... логіка\n}",
      useful_links: [
        {
          title: "Що таке Gnosis Safe: Не страшно втратити приватний ключ",
          url: "https://phemex.com/academy/what-is-gnosis-safe"
        },
        {
          title: "Чому майбутнє Ethereum за Smart-акаунтами",
          url: "https://safe.mirror.xyz/vZHodiI1NLJbz4fd0vuil0hyLHNGCBH8oLyMzGTb4sc"
        }
      ]
    },
    erc4337: {
      name: "Абстрактний акаунт (ERC-4337)",
      description: "Це нова модель, де смарт-гаманці можуть ініціювати транзакції без EOA. ERC 4337 вводить концепцію користувальницької операції (UserOperation) — спеціальних об'єктів, які усередині містять декілька взаємодій з блокчейном, що користувачі можуть надіслати у загальний розподілений список таких обʼєктів. Спеціальні пакувальні вузли (bundlers) постійно слухають та обробляють цей список, формуючи транзакції з користувальницькими операціями і надсилаючи їх на єдиний загальний контракт EntryPoint, який у свою чергу викликає смарт-контракт акаунт, що вже напряму виконує користувальницькі операції взаємодії з іншими контрактами блокчейну.",
      features: "* Контроль над виконанням через стандартизовану і перевірену реалізацію\n* Програмований контроль доступу\n* Соціальне відновлення - заміна ключа через опікунів у разі втрати доступу\n* Обмеження і політики — ліміти, фільтри адрес, блокування транзакцій\n* Можливість спонсорства чи оплати транзакцій сторонніми токенами",
      advantages: "* Абстракція акаунту дозволяє значно кращий UX\n* Більш гнучкий та налаштовуваний ніж EOA\n* Підтримка пакетування транзакцій та спонсорства\n* Стандартизована реалізація зменшує ризики безпеки",
      disadvantages: "* Потребує спеціалізованої інфраструктури (bundlers)\n* Складніша архітектура для розуміння та відлагодження\n* Обмежене впровадження порівняно з традиційними акаунтами",
      code: "// Смарт-контракт гаманець, відповідний стандарту ERC-4337\ncontract ERC4337Account is IAccount {\n    // ... логіка\n}",
      useful_links: [
        {
          title: "EIP-4337: Специфікація абстракції акаунту через EntryPoint контракт",
          url: "https://eips.ethereum.org/EIPS/eip-4337"
        },
        {
          title: "Абстракція акаунту: Повний гід по ERC-4337",
          url: "https://www.alchemy.com/blog/account-abstraction"
        },
        {
          title: "ERC-4337: Пояснення абстракції акаунту в Ethereum",
          url: "https://consensys.io/blog/account-abstraction-erc-4337-guide"
        }
      ]
    }
  }
};
