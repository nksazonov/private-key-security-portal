export const securityFeaturesContent = {
  accountType: {
    name: "Тип акаунту",
    description: "У мережі Ethereum існують різні типи акаунтів, від правильного розуміння яких залежить безпека зберігання та управління цифровими активами. Невірний вибір чи використання акаунту може призвести до втрати коштів або їх компрометації, оскільки зловмисники активно експлуатують слабкі місця у механізмах контролю доступу.",
    eoa: {
      name: "Зовнішньо-керований акаунт (EOA)",
      description: "EOA є базовим типом акаунту в Ethereum, контрольованим приватним ключем, створення якого розглядалося раніше. Він має пару ключів (приватний і публічний), але не містить коду на блокчейні. Транзакції відправляються напряму від EOA і підписуються приватним ключем, що дозволяє ініціювати передачу активів або виклик смарт-контракту. Проте, EOA не підтримує програмованої логіки, а безпека повністю залежить від збереження приватного ключа. Його компрометація означає втрату доступу до активів без можливості відновлення, оскільки механізмів скасування транзакцій не існує. Єдиним захистом є дотримання користувачем правил безпеки: захищене зберігання seed-фрази, апаратні гаманці, MFA тощо.",
      features: "* Контроль доступу за допомогою приватного ключа\n* \"Безпека у простоті\" (не підтримує програмовану логіку)",
      advantages: "* Простий та зрозумілий у використанні\n* Нижча вартість транзакцій через простішу логіку виконання\n* Нативний для блокчейну - підтримується всіма гаманцями та dApps\n* Повний контроль над акаунтом при надійному зберіганні ключа",
      disadvantages: "* Відсутність механізму відновлення - втрата приватного ключа означає незворотну втрату активів\n* Відсутність додаткових функцій безпеки крім володіння ключем\n* Обмежена функціональність - неможливість автоматизувати транзакції або встановлювати політики\n* Єдина точка відмови - компрометація ключа означає повне захоплення акаунту"
    },
    smartContract: {
      name: "Контрактний акаунт",
      description: "Це акаунт у вигляді смарт-контракту з програмною логікою, контроль над яким здійснюється не одним ключем, а його кодом, який може, наприклад, вимагати мультипідпису для транзакцій. Смарт-гаманці не ініціюють транзакції самостійно — потрібен виклик з EOA, але не дивлячись на це, головна їх перевага — це можливість складної логіки безпеки. Завдяки цьому смарт-гаманці пропонують вищий рівень безпеки та зручності. Але помилки в коді можуть призвести до втрати активів, тому потрібен ретельний його аудит.",
      features: "* Контроль над виконанням через специфічну реалізацію\n* Програмований контроль доступу\n* Соціальне відновлення - заміна ключа через опікунів у разі втрати доступу\n* Обмеження і політики — ліміти, фільтри адрес, блокування транзакцій\n* Можливість спонсорства чи оплати транзакцій сторонніми токенами",
      advantages: "* Посилена безпека завдяки програмованій бізнес-логіці\n* Декілька методів верифікації, включаючи підтримку мультипідпису\n* Можливість відновлення доступу через механізми опікунства\n* Можливість встановлення лімітів транзакцій та політик безпеки\n* Більш гнучкий та налаштовуваний ніж EOA",
      disadvantages: "* Вища складність збільшує потенціал для вразливостей безпеки\n* Потребує EOA для ініціювання транзакцій\n* Вищі витрати на газ через складнішу логіку виконання\n* Потенційна можливість помилок у коді, що можуть назавжди заблокувати кошти\n* Менш універсальна підтримка в гаманцях та dApps"
    },
    erc4337: {
      name: "Абстрактний акаунт (ERC-4337)",
      description: "Це нова модель, де смарт-гаманці можуть ініціювати транзакції без EOA. ERC 4337 вводить концепцію користувальницької операції (UserOperation) — спеціальних об'єктів, які усередині містять декілька взаємодій з блокчейном, що користувачі можуть надіслати у загальний розподілений список таких обʼєктів. Спеціальні пакувальні вузли (bundlers) постійно слухають та обробляють цей список, формуючи транзакції з користувальницькими операціями і надсилаючи їх на єдиний загальний контракт EntryPoint, який у свою чергу викликає смарт-контракт акаунт, що вже напряму виконує користувальницькі операції взаємодії з іншими контрактами блокчейну. Така архітектура дозволяє смарт-контракт акаунту (Smart Contract Account) самостійно перевіряти і виконувати дії. Комісії можна сплачувати як з балансу акаунту, так і через спеціальний опціональний функціонал Paymaster за допомогою інших токенів. ERC 4337 знижує ризики людського фактору, проте вимагає якісного коду, оскільки нові загрози, такі як DoS-атаки на мемпул, все ще можливі.",
      features: "* Контроль над виконанням через стандартизовану і перевірену реалізацію\n* Програмований контроль доступу\n* Соціальне відновлення - заміна ключа через опікунів у разі втрати доступу\n* Обмеження і політики — ліміти, фільтри адрес, блокування транзакцій\n* Можливість спонсорства чи оплати транзакцій сторонніми токенами",
      advantages: "* Покращений користувацький досвід з безгазовими транзакціями\n* Відсутність потреби в EOA для ініціювання транзакцій\n* Підтримка пакетування транзакцій та спонсорства\n* Стандартизована реалізація зменшує ризики безпеки\n* Абстракція акаунту дозволяє гнучкі методи автентифікації",
      disadvantages: "* Відносно новий стандарт з меншим боєвим тестуванням\n* Потребує спеціалізованої інфраструктури (bundlers)\n* Потенціал для нових векторів атак в мемпулі\n* Складніша архітектура для розуміння та відлагодження\n* Обмежене впровадження порівняно з традиційними акаунтами"
    }
  }
};