export const securityFeaturesContent = {
  accountType: {
    name: "Тип акаунту",
    description: "У мережі Ethereum існують різні типи акаунтів, від правильного розуміння яких залежить безпека зберігання та управління цифровими активами. Невірний вибір чи використання акаунту може призвести до втрати коштів або їх компрометації, оскільки зловмисники активно експлуатують слабкі місця у механізмах контролю доступу.",
    eoa: {
      name: "Зовнішньо-керований акаунт (EOA)",
      description: "EOA є базовим типом акаунту в Ethereum, контрольованим парою ключів (приватний і публічний), але не містить коду на блокчейні. Транзакції відправляються напряму від EOA і підписуються приватним ключем, що дозволяє ініціювати передачу активів або виклик смарт-контракту.",
      features: "* Контроль доступу за допомогою приватного ключа\n* \"Безпека у простоті\" (не підтримує програмовану логіку)",
      advantages: "* Простий та зрозумілий у використанні\n* Нижча вартість транзакцій через простішу логіку виконання\n* Нативний для блокчейну - підтримується всіма гаманцями та dApps",
      disadvantages: "* Відсутність додаткових функцій безпеки крім володіння ключем\n* Обмежена функціональність - неможливість автоматизувати транзакції або встановлювати політики\n* Єдина точка відмови - компрометація ключа означає повне захоплення акаунту",
      code: "// Без смарт-контракту, тільки приватний ключ\n// Адреса: 0xbAA3384a0681E701F769DfaE81f1fAc06e1f9234\n0xa24df31f43ca025df6f9c07f68155b4594a37381ed196a94cee14fb921c3a738",
      useful_links: [
        {
          title: "Розуміння акаунтів в Ethereum",
          url: "https://ethereum.org/en/developers/docs/accounts/"
        },
        {
          title: "Керування ключами для зовнішньо-керованих акаунтів",
          url: "https://docs.metamask.io/wallet/reference/best-practices/"
        }
      ]
    },
    smartContract: {
      name: "Контрактний акаунт",
      description: "Це акаунт у вигляді смарт-контракту з програмною логікою, контроль над яким здійснюється не одним ключем, а його кодом, який може, наприклад, вимагати мультипідпису для транзакцій. Смарт-гаманці не ініціюють транзакції самостійно — потрібен виклик з EOA.",
      features: "* Контроль над виконанням через специфічну реалізацію\n* Програмований контроль доступу\n* Соціальне відновлення - заміна ключа через опікунів у разі втрати доступу\n* Обмеження і політики — ліміти, фільтри адрес, блокування транзакцій\n* Можливість спонсорства чи оплати транзакцій сторонніми токенами",
      advantages: "* Посилена безпека завдяки програмованій бізнес-логіці\n* Більш гнучкий та налаштовуваний ніж EOA",
      disadvantages: "* Вища складність збільшує потенціал для вразливостей безпеки\n* Вищі витрати на газ через складнішу логіку виконання\n* Потенційна можливість помилок у коді, що можуть назавжди заблокувати кошти\n* Повна відсутність стандартизації",
      code: "// Нестандартизований, пропрієтарний код Solidity\ncontract NonStandardizedWallet {\n  // ... логіка\n}",
      useful_links: [
        {
          title: "Що таке Gnosis Safe: Не страшно втратити приватний ключ",
          url: "https://phemex.com/academy/what-is-gnosis-safe"
        },
        {
          title: "Чому майбутнє Ethereum за Smart-акаунтами",
          url: "https://safe.mirror.xyz/vZHodiI1NLJbz4fd0vuil0hyLHNGCBH8oLyMzGTb4sc"
        }
      ]
    },
    erc4337: {
      name: "Абстрактний акаунт (ERC-4337)",
      description: "Це нова модель, де смарт-гаманці можуть ініціювати транзакції без EOA. ERC 4337 вводить концепцію користувальницької операції (UserOperation) — спеціальних об'єктів, які усередині містять декілька взаємодій з блокчейном, що користувачі можуть надіслати у загальний розподілений список таких обʼєктів. Спеціальні пакувальні вузли (bundlers) постійно слухають та обробляють цей список, формуючи транзакції з користувальницькими операціями і надсилаючи їх на єдиний загальний контракт EntryPoint, який у свою чергу викликає смарт-контракт акаунт, що вже напряму виконує користувальницькі операції взаємодії з іншими контрактами блокчейну.",
      features: "* Контроль над виконанням через стандартизовану і перевірену реалізацію\n* Програмований контроль доступу\n* Соціальне відновлення - заміна ключа через опікунів у разі втрати доступу\n* Обмеження і політики — ліміти, фільтри адрес, блокування транзакцій\n* Можливість спонсорства чи оплати транзакцій сторонніми токенами",
      advantages: "* Абстракція акаунту дозволяє значно кращий UX\n* Більш гнучкий та налаштовуваний ніж EOA\n* Підтримка пакетування транзакцій та спонсорства\n* Стандартизована реалізація зменшує ризики безпеки",
      disadvantages: "* Потребує спеціалізованої інфраструктури (bundlers)\n* Складніша архітектура для розуміння та відлагодження\n* Обмежене впровадження порівняно з традиційними акаунтами",
      code: "// Смарт-контракт гаманець, відповідний стандарту ERC-4337\ncontract ERC4337Account is IAccount {\n    // ... логіка\n}",
      useful_links: [
        {
          title: "EIP-4337: Специфікація абстракції акаунту через EntryPoint контракт",
          url: "https://eips.ethereum.org/EIPS/eip-4337"
        },
        {
          title: "Абстракція акаунту: Повний гід по ERC-4337",
          url: "https://www.alchemy.com/blog/account-abstraction"
        },
        {
          title: "ERC-4337: Пояснення абстракції акаунту в Ethereum",
          url: "https://consensys.io/blog/account-abstraction-erc-4337-guide"
        }
      ]
    }
  }
};